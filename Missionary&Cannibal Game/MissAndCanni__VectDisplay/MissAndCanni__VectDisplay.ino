#include <VectorDisplay.h>

SerialDisplayClass Display;
VectorDisplayMessage msg;


//// 'miss', 120x155px
//const unsigned char miss [] PROGMEM = {
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
//  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
//  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
//  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x60, 0x07, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
//  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
//  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
//  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xf8, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
//  0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
//  0x3f, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 
//  0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 
//  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 
//  0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 
//  0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 
//  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
//  0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 
//  0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 
//  0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 
//  0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 
//  0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
//  0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 
//  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
//  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
//  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
//  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
//  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
//  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 
//  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
//  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
//  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x1c, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x1f, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
//  0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 
//  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf9, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0x00, 0x1e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0x80, 0x1e, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0x80, 0x1e, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0x80, 0x1e, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0x80, 0x0e, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
//  0x0e, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0e, 
//  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0x00, 
//  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0x00, 0x3f, 
//  0xff, 0xff, 0xff, 0xff, 0xff
//};
//
//
//// 'canni', 120x155px
//const unsigned char canni [] PROGMEM = {
//  0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xfc, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
//  0x00, 0x0f, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
//  0x03, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 
//  0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 
//  0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 
//  0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 
//  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x80, 0x1f, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0x80, 0x3f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x1f, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xff, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x3f, 0xff, 
//  0xf8, 0x00, 0x00, 0x00, 0xff, 0x00, 0x1f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xf0, 
//  0x00, 0x00, 0x00, 0x1f, 0x00, 0x07, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 
//  0x00, 0x00, 0x0e, 0x00, 0x03, 0xff, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 
//  0x00, 0x03, 0xc0, 0x01, 0xff, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 
//  0x03, 0xc0, 0x01, 0xff, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 
//  0xc0, 0x00, 0xff, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03, 0x00, 0x00, 0x00, 0xc0, 
//  0x00, 0x3f, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 
//  0x3f, 0x00, 0x38, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
//  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0x00, 
//  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
//  0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x7f, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
//  0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xfc, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
//  0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
//  0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
//  0x0f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 
//  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 
//  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
//  0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x01, 0x00, 0x3f, 0xff, 0xff, 0xff, 
//  0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x07, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
//  0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 
//  0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
//  0x00, 0x01, 0xff, 0xff, 0xfc, 0x01, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xfc, 
//  0x01, 0xff, 0xff, 0xfc, 0x01, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xfe, 0x01, 
//  0xff, 0xff, 0xfc, 0x03, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xfe, 0x01, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0x80, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
//  0x3f, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 
//  0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 
//  0x47, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfc, 0x03, 
//  0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf8, 0x03, 0xff, 
//  0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe0, 0x01, 0xff, 0x00, 
//  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x0f, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xc0, 0x00, 0x70, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xe0, 0x0f, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xfe, 0x00, 0x3e, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
//  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
//  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
//  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
//  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0x80, 0x1c, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x3f, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xc0, 0x3f, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xe0, 0x0f, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xf0, 0x1f, 0xff, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xc0, 0x3f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xc0, 0x3f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xc0, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
//  0x3f, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 
//  0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xc0, 
//  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xe0, 0x03, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xe0, 0x03, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xf0, 0x03, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
//  0xfc, 0x00, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
//  0x00, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 
//  0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 
//  0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 
//  0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 
//  0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xc0, 
//  0x03, 0xff, 0xff, 0xff, 0xff
//};






// Main variables and their pointers

int missLeft,canniLeft,missRight,canniRight ;
int* cL = &canniLeft; int* mL = &missLeft;
int* cR = &canniRight; int* mR = &missRight;

char boat1 = 'k',boat2='k';
char*b1 = &boat1; char*b2 = &boat2;
int n =0;

bool dFlag = true;
char boatPos;
char* BP = &boatPos;
#define TFT_BLACK TFT_OLIVE







void setup() {
  Display.begin(9600,1280,1920);
    Display.addButton('M', "M. DOWN");
    Display.addButton('m', "M. UP");
    Display.addButton('C', "C. DOWN");
    Display.addButton('c', "C. UP");
    Display.addButton('T', "Trans");
    *cL = 3; *mL = 3;
    *cR = 0; *mR = 0;
    boatPos = 'L';
  Display.clear();
  //Display.backColor(TFT_BLUE);

}





// Making a function to clear cluster

void drawTri(int x0, int y0, int x1, int y1, int x2, int y2)
{
  Display.fillTriangle(x0,y0, x1,y1, x2,y2, TFT_DARKGREY);
}


void drawCirc(int a0,int b0,int r)
{
  Display.fillCircle(a0,b0,r, TFT_DARKGREY);
}



void drawBoat()
{
    if(boatPos =='L')
    {
     Display.drawFastHLine(60,715,150,ILI9341_YELLOW);
     Display.drawFastVLine(60,655,60,ILI9341_YELLOW);
     Display.drawFastVLine(210,655,60,ILI9341_YELLOW);
    }

    else if(boatPos == 'R')
    {
     Display.drawFastHLine(860,715,150,ILI9341_YELLOW);
     Display.drawFastVLine(860,655,60,ILI9341_YELLOW);
     Display.drawFastVLine(1010,655,60,ILI9341_YELLOW);
    }
 
}


bool checkit()
{
 
//(missLeft+(3-missLeft-missRight)<canniLeft+(3-canniLeft-canniRight)&& (missLeft>0)) || (missLeft+(3-missLeft-missRight)<canniLeft+(3-canniLeft-canniRight)&&(canniLeft>0))
//(missRight+(3-missLeft-missRight)<canniRight+(3-canniLeft-canniRight)&& (missLeft>0)) || (missRight+(3-missLeft-missRight)<canniRight+(3-canniLeft-canniRight)&&(canniLeft>0))

int m = missLeft+(3-missLeft-missRight);
int n = canniLeft+(3-canniLeft-canniRight);
int o = missRight+(3-missLeft-missRight);
int p = canniRight+(3-canniLeft-canniRight);
 
 if (boatPos =='L'){
  if((m<n) && ((missLeft>0) && (canniLeft>0)))
  {
     //  Display.setTextSize(5);
      // Display.text(50, 80, "m: "+String(m));
      // Display.text(50,120,"n: "+String(n));
    
    return false;
  }

  if(missRight<canniRight && (missRight>0))
  {
    return false;
  }
 }
  
   
   if (boatPos =='R')
   {if((o<p) && ((missRight>0) && (canniRight>0)))
  {
     //Display.text(50, 80,"o: " + String(o));
     //Display.text(50,120,"p: "+String(p));
    return false;
  }
    if(missLeft<canniLeft && (missLeft>0))
  {
    return false;
  }
   }

else
{
  return true;
}

  
}



//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$4

void loop() {


Display.fillRect(0,200,1280,800,TFT_OLIVE);


while(missRight!=3 || canniRight!=3)
{



 Display.setTextSize(8);
 Display.text(50, 20, "   Missionaries and Cannibals");
  Display.setTextSize(6);
 Display.text(50,80,"        Vector-Display edition");

if(!checkit())
{
  n++;
  break;
}




//Draw the characters on screen.

 if (dFlag)
 {
Display.fillRect(0,420,280,190,TFT_NAVY);
Display.fillRect(800,420,280,190,TFT_NAVY);


for (int inc = 30; inc<(missLeft*80)+30; inc+=80)  // Loop for drawing miss on left side
 {
   drawTri(inc+25,460,inc,500,inc+50,500);        
  
 }


for (int c = 55; c<(canniLeft*80)+30; c+=80)      // Loop for drawing canni on left side
 {
   drawCirc(c,580,25);
 }



for (int inc = 30; inc<(missRight*80)+30; inc+=80)  // Loop for drawing miss on right side
 {
  if(missRight>3)
  {break;}
   drawTri(800+inc+25,460,800+inc,500,inc+850,500);        
  
 }


for (int c = 55; c<(canniRight*80)+30; c+=80)      // Loop for drawing canni on right side
 {  if(canniRight>3)
     {break;}
   drawCirc(800+c,580,25);
 }

 dFlag = false;
 }




//Boat and transportation things.

if(boat1 == 'm' || boat1 == 'c' ||  boat2 == 'm' || boat2 == 'c' || boat1 == 'k' || boat2 =='k') // checking if someone is in boat

{
   if(boatPos == 'L')
   {
              if (boat1 == 'm')
             {
              drawBoat();
              drawTri(90,670,65,710,115,710);    
             }
          
          
              if (boat1 == 'c')
             {
              drawBoat();
              drawCirc(85,690,25);
              
             }
          
          
                if (boat2 == 'm')
             {
              drawBoat();
              drawTri(180,670,155,710,205,710);
          
              
             }
          
          
                if (boat2 == 'c')
             {
              drawBoat();
              drawCirc(185,690,25);
              
             }
          
             if(boat1 =='k')
             {
              drawBoat();
              Display.fillTriangle(90,670,65,710,115,710,TFT_BLACK);
              Display.fillCircle(85,690,25, TFT_BLACK);
             }
          
          
             if(boat2 =='k')
             {
              drawBoat();
              Display.fillTriangle(180,670,155,710,205,710,TFT_BLACK);
              Display.fillCircle(185,690,25, TFT_BLACK);
             }
   }



   if(boatPos == 'R')
   {
              if (boat1 == 'm')
             {
              drawBoat();
              drawTri(890,670,865,710,915,710);    
             }
          
          
              if (boat1 == 'c')
             {
              drawBoat();
              drawCirc(885,690,25);
              
             }
          
          
                if (boat2 == 'm')
             {
              drawBoat();
              drawTri(980,670,955,710,1005,710);
          
              
             }
          
          
                if (boat2 == 'c')
             {
              drawBoat();
              drawCirc(985,690,25);
              
             }
          
             if(boat1 =='k')
             {
              drawBoat();
              Display.fillTriangle(890,670,865,710,915,710,TFT_BLACK);
              Display.fillCircle(885,690,25, TFT_BLACK);
             }
          
          
             if(boat2 =='k')
             {
              drawBoat();
              Display.fillTriangle(980,670,955,710,1005,710,TFT_BLACK);
              Display.fillCircle(985,690,25, TFT_BLACK);
             }
   }


}   // boat printing ends.







// All the displaying stuff


 
//Display.text(60,1250,String(missLeft));
//Display.text(60,1290,String(canniLeft));
//Display.text(60,1330,String(missRight));                              //Displaying var to debug. Commented to clear clutter.
//Display.text(60,1370,String(canniRight));
//Display.text(60,1410,"Boat1 State: "+String(boat1));
//Display.text(60,1450,"Boat2 State: "+String(boat2));
//Display.text(60,1490,"Boat position: "+String(boatPos));
Display.setTextSize(7);
Display.text(20,1120,"Instructions:-");
Display.setTextSize(5);
Display.text(0,1190,"1.   ");
Display.setTextColor(TFT_BLACK, TFT_MAGENTA);
Display.text(35,1190,"'Triangles\'");
Display.setTextColor(TFT_WHITE);
Display.text(300,1190, "are good people.");
Display.text(0,1230,"2.   ");
Display.setTextColor(TFT_BLACK, TFT_MAGENTA);
Display.text(35,1230,"'Circles\'");
Display.setTextColor(TFT_WHITE);
Display.text(260,1230,"are cannibals.");
Display.text(0,1270,"3.You have to transport all of them across the river ");
Display.text(40,1310," to other island.");
Display.text(0,1350,"4.At no moment,the total number of cannibals should ");
Display.text(40,1390," be greater than people");
Display.text(0,1430,"5.If no. of cannibals greater than no. of people"); 
Display.text(40,1470," at any side, you lose.");
Display.text(0,1510,"6.Use buttons to move the characters and the boat.");
Display.text(0,1550,"7.Use'M. Down' to move person to boat and ");
Display.text(40,1590,"   'M. UP' to move person from boat");
Display.text(0,1625,"8.Use'C. Down' to move cannibal to boat and ");
Display.text(40,1675,"   'C. UP' to move cannibal from boat");
Display.text(0,1710,"9.Use 'Trans' to move/transport the boat from left");
Display.text(40,1750," island to the right island");


Display.text(280,1850,"© Srihari Ayapilla - 2019");




// Code the onscreen buttons below


if (Display.readMessage(&msg) && msg.what == MESSAGE_BUTTON) {




                if(msg.data.button == 'T')
                        
                        {  dFlag = true;

                                if(boat1 == 'm' || boat1 == 'c' ||  boat2 == 'm' || boat2 == 'c' )
                                {
                              
                                    if(boatPos == 'L')
                                    {
                                       Display.fillRect(30,400,400,400,TFT_BLACK);
                                      *BP = 'R'; 
                                    }

                                    else if(boatPos == 'R')
                                    {
                                       Display.fillRect(830,430,400,400,TFT_BLACK);
                                      *BP = 'L';
                                    }
                                }    
                        }
    
        if (boatPos =='L' && (msg.data.button == 'M' || msg.data.button == 'C' || msg.data.button == 'T' || msg.data.button == 'c' || msg.data.button == 'm'))
           {
                                
                          
                          
                          if (msg.data.button == 'M') 
                          { 
                             dFlag = true;

                            if(missLeft>0){
                                if((boat1 == 'k') &&  (boat2 == 'k'))    //KK
                                    {
                                      *mL = *mL-1;
                                      *b1 = 'm';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'c') || (boat1 =='k' && boat2 == 'm')  )    //KM / KC
                                    {
                                      *mL = *mL-1;
                                      *b1 = 'm';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 == 'c' && boat2 == 'k') || (boat1 =='m' && boat2 == 'k'))    //MK / CK
                                    {
                                      *mL = *mL-1;
                                      *b2 = 'm';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    } 
                                    
                            }     
                           }

                        
                        
                          else if (msg.data.button == 'm') 
                          {
                             dFlag = true;

                                if((boat1 == 'm') &&  (boat2 == 'm'))    //mm
                                    {
                                      *mL = *mL+1;
                                      *b2 = 'k';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'm') || (boat1 == 'c' && boat2 == 'm') )    //KM
                                    {
                                      *mL = *mL+1;
                                      *b2 = 'k';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 =='m' && boat2 == 'k') || (boat1 =='m' && boat2 == 'c'))    //MK
                                    {
                                      *mL = *mL+1;
                                      *b1 = 'k';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }                         
                            
       
                          }
                        
                           if (msg.data.button == 'C') 
                          {  dFlag = true;

                            if(canniLeft >0)
                               { if((boat1 == 'k') &&  (boat2 == 'k'))    //KK
                                    {
                                      *cL = *cL-1;
                                      *b1 = 'c';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'c') || (boat1 =='k' && boat2 == 'm')  )    //KM /KC 
                                    {
                                      *cL = *cL-1;
                                      *b1 = 'c';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 == 'c' && boat2 == 'k') || (boat1 =='m' && boat2 == 'k'))    //MK/CK
                                    {
                                      *cL = *cL-1;
                                      *b2 = 'c';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    } 
                               }      
                                    
                           }

                        
                        
                          else if (msg.data.button == 'c') 
                          {
                             dFlag = true;

                                if((boat1 == 'c') &&  (boat2 == 'c'))    //CC
                                    {
                                      *cL = *cL+1;
                                      *b2 = 'k';
                                      Display.fillRect(30,400,400,4000,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'c') || (boat1 == 'm' && boat2 == 'c'))    //KC
                                    {
                                      *cL = *cL+1;
                                      *b2 = 'k';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 =='c' && boat2 == 'k') || (boat1 == 'c' && boat2 == 'm'))    //CK
                                    {
                                      *cL = *cL+1;
                                      *b1 = 'k';
                                      Display.fillRect(30,400,400,400,TFT_BLACK);  
                                    
                                    }                         
                            
       
                          }                      


        }    // 'L' boatPos if cond.



    if (boatPos =='R' && (msg.data.button == 'M' || msg.data.button == 'C' || msg.data.button == 'T' || msg.data.button == 'c' || msg.data.button == 'm'))
        {

                     
                            if (msg.data.button == 'M') 
                          {  dFlag = true;

                            if(missRight>0){ 
                                if((boat1 == 'k') &&  (boat2 == 'k'))    //KK
                                    {
                                      *mR = *mR-1;
                                      *b1 = 'm';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'c') || (boat1 =='k' && boat2 == 'm')  )    //KM / KC
                                    {
                                      *mR = *mR-1;
                                      *b1 = 'm';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 == 'c' && boat2 == 'k') || (boat1 =='m' && boat2 == 'k'))    //MK / CK
                                    {
                                      *mR = *mR-1;
                                      *b2 = 'm';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    } 
                                    
                            }    
                           }

                        
                        
                          else if (msg.data.button == 'm') 
                          { dFlag = true;

                            
                                if((boat1 == 'm') &&  (boat2 == 'm'))    //mm
                                    {
                                      *mR = *mR+1;
                                      *b2 = 'k';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'm') ||(boat1 == 'c' && boat2 == 'm') )    //KM
                                    {
                                      *mR = *mR+1;
                                      *b2 = 'k';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 =='m' && boat2 == 'k')|| (boat1 == 'm' && boat2 == 'c'))    //MK
                                    {
                                      *mR = *mR+1;
                                      *b1 = 'k';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }                         
                            
       
                          }
                        
                           if (msg.data.button == 'C') 
                          {  dFlag = true;

                            if(canniRight>0)
                                {if((boat1 == 'k') &&  (boat2 == 'k'))    //KK
                                    {
                                      *cR = *cR-1;
                                      *b1 = 'c';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'c') || (boat1 =='k' && boat2 == 'm')  )    //KM /KC 
                                    {
                                      *cR = *cR-1;
                                      *b1 = 'c';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 == 'c' && boat2 == 'k') || (boat1 =='m' && boat2 == 'k'))    //MK/CK
                                    {
                                      *cR = *cR-1;
                                      *b2 = 'c';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    } 
                                }
                                    
                           }

                        
                        
                          else if (msg.data.button == 'c') 
                          { dFlag = true;

                            
                                if((boat1 == 'c') &&  (boat2 == 'c'))    //CC
                                    {
                                      *cR = *cR+1;
                                      *b2 = 'k';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }   
                                else if((boat1 == 'k' && boat2 == 'c') || (boat1 == 'm' && boat2 == 'c') )    //KC
                                    {
                                      *cR = *cR+1;
                                      *b2 = 'k';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }                            
                                else if((boat1 =='c' && boat2 == 'k') || (boat1 == 'c' && boat2 == 'm'))    //CK
                                    {
                                      *cR = *cR+1;
                                      *b1 = 'k';
                                      Display.fillRect(830,400,400,400,TFT_BLACK);  
                                    
                                    }                         
                            
       
                          } 
 
  
        }   // R boatPos if cond.
 


  }  // Buttons routine ends


}


while(n >0)
{
Display.clear();
 Display.setTextSize(10);
 Display.text(400, 700, "Game Over");
 Display.text(50,800,"Press RESET to restart");
 while(1);


  
}
 Display.clear();
 Display.setTextSize(10);
 Display.text(200, 700, "Congratulations !!");
 Display.text(50,900,"Press RESET to restart");

 while(1);


 
}    // void loop ends












//////////////////////////////    Spare redundant and reference code /////////////////


  //Display.drawBitmap(100,100,gameover,128,64,ILI9341_GREEN ); 

//Display.fillTriangle(55,460, 30,500, 80,500, TFT_DARKGREY);

//Display.fillCircle(135,480,25, TFT_DARKGREY);

// Display.drawRect(40, 800, 1200, 500, TFT_DARKGREY) ;
// int x = Display.getTouchX();
// int y = Display.getTouchY();
//
// Display.text(60,850,String(x));
//  Display.text(60,900,String(y));


//Display.drawBitmap(30,200,miss,120,155,TFT_DARKGREY );

 //Display.fillRect(30,200,500,200,TFT_BLACK);
     // Display.drawBitmap(300,200,canni,120,155,TFT_DARKGREY );
